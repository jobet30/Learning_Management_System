name: Salesforce CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - release/*
      - main

  pull_request:
    branches:
      - develop
      - release/*
      - main

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        options:
        - dev
        - staging
        - production

      feature_flag:
        description: 'Feature flag to deploy to'
        required: false
        default: 'false'
        type: boolean

      deploy_to_prod:
        description: 'Deploy to production'
        required: false
        default: 'false'
        type: boolean

defaults:
  run:
    shell: bash

jobs:
  build_and_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Lint Apex Code
        run: |
          npx sfdx force:source:convert -d ./mdapi
          npm install @salesforce/eslint-plugin-lwc --save-dev
          npx eslint --ext .js,.html force-app/main/default/lwc

  apex_test:
    runs-on: ubuntu-latest
    needs: build_and_lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Authorize DevHub
        run: |
          sfdx force:auth:jwt:grant --clientid $SF_CLIENT_ID --jwtkeyfile assets/server.key --username $SF_DEV_HUB_USERNAME --instanceurl https://login.salesforce.com

      - name: Run Apex Tests
        run: |
          sfdx force:apex:test:run --resultformat human --wait 10 --testlevel RunLocalTests

      - name: Test Coverage Check
        run: |
          TEST_COVERAGE=$(sfdx force:apex:test:report --codecoverage --json | jq -r '.result.summary.testRunCoverage')
          if (( $(echo "$TEST_COVERAGE < 75" | bc -l) )); then
            echo "Test coverage below 75%, failing job."
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: apex_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Select Deployment Environment
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "Deploying to Production environment"
            sfdx force:auth:jwt:grant --clientid $SF_CLIENT_ID --jwtkeyfile assets/server.key --username $SF_PRODUCTION_USERNAME --instanceurl https://login.salesforce.com
          elif [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "Deploying to Staging environment"
            sfdx force:auth:jwt:grant --clientid $SF_CLIENT_ID --jwtkeyfile assets/server.key --username $SF_STAGING_USERNAME --instanceurl https://test.salesforce.com
          else
            echo "Deploying to Dev environment"
            sfdx force:auth:jwt:grant --clientid $SF_CLIENT_ID --jwtkeyfile assets/server.key --username $SF_DEV_USERNAME --instanceurl https://login.salesforce.com

      - name: Deploy Source to Target Environment
        run: |
          sfdx force:source:deploy -p force-app --testlevel RunLocalTests

  deploy_to_production:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.inputs.deploy_to_prod == 'true'
    steps:
      - name: Deploy to Production
        run: |
          echo "Manual deployment to production requested"
          sfdx force:source:deploy -p force-app --testlevel RunAllTestsInOrg

  feature_flag:
    runs-on: ubuntu-latest
    if: github.event.inputs.feature_flag == 'true'
    steps:
      - name: Feature Flag Action
        run: echo "Feature flag is enabled, performing special tasks..."
